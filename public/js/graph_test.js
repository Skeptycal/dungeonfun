// Generated by CoffeeScript 1.10.0
(function() {
  var assert, cardinals, diagonals, filter, g, graph, heuristic, i, j, k, len, len1, m, neighbors, p, path, point, points, results,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  assert = require('assert');

  graph = require('./graph.coffee');

  g = new graph.Graph();

  g.set(0, 0, 11);

  g.set(1, 0, 22);

  g.set(0, 1, 33);

  g.set(1, 1, 44);

  assert.equal(g.get(0, 0), 11);

  assert.equal(g.get(1, 0), 22);

  assert.equal(g.get(0, 1), 33);

  assert.equal(g.get(1, 1), 44);

  assert.equal(g.get(99, 99), 0);

  assert.equal(g.get(-1, -1), 0);

  assert.deepEqual(g.getRect(0, 0, 2, 2), [[11, 22], [33, 44]]);

  assert.deepEqual(g.getRect(-1, -1, 2, 2), [[0, 0], [0, 11]]);

  g.setPoint([0, 0], 55);

  g.setPoint([1, 1], 66);

  assert.equal(g.getPoint([0, 0]), 55);

  assert.equal(g.getPoint([1, 1]), 66);

  g.clear(1, 1);

  assert.ok(!g.get(1, 1));

  g = new graph.Graph();

  g.set(0, 0, 1);

  g.set(1, 0, 2);

  g.set(2, 0, 3);

  g.set(0, 1, 4);

  g.set(1, 1, 5);

  g.set(2, 1, 6);

  g.set(0, 2, 7);

  g.set(1, 2, 8);

  g.set(2, 2, 9);

  diagonals = g.neighbors(1, 1, true);

  assert.deepEqual(diagonals, [1, 2, 3, 4, 6, 7, 8, 9]);

  cardinals = g.neighbors(1, 1, false);

  assert.deepEqual(cardinals, [2, 4, 6, 8]);

  neighbors = (function() {
    var i, len, ref, results;
    ref = g.neighborPoints(0, 0);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      results.push(p.join(','));
    }
    return results;
  })();

  points = ['-1,-1', '0,-1', '1,-1', '-1,0', '1,0', '-1,1', '0,1', '1,1'];

  for (i = 0, len = points.length; i < len; i++) {
    point = points[i];
    assert.ok(indexOf.call(neighbors, point) >= 0, point + " in neighbors");
  }

  neighbors = (function() {
    var j, len1, ref, results;
    ref = g.neighborPoints(0, 0, false);
    results = [];
    for (j = 0, len1 = ref.length; j < len1; j++) {
      p = ref[j];
      results.push(p.join(','));
    }
    return results;
  })();

  points = ['0,-1', '-1,0', '1,0', '0,1'];

  for (j = 0, len1 = points.length; j < len1; j++) {
    point = points[j];
    assert.ok(indexOf.call(neighbors, point) >= 0, point + " in neighbors");
  }

  m = [[1, 0, 1, 1, 1], [1, 0, 1, 0, 0], [1, 1, 1, 1, 1]];

  g = new graph.Graph(m);

  path = g.astar(0, 2, 4, 0);

  assert.deepEqual(path, [[1, 2], [2, 2], [2, 1], [2, 0], [3, 0]]);

  path = g.astar(0, 2, 4, 0, null, null, true);

  assert.deepEqual(path, [[1, 2], [2, 1], [3, 0]]);

  m = [[1, 1, 4, 3, 3], [9, 2, 9, 2, 9], [3, 3, 3, 9, 2]];

  g = new graph.Graph(m);

  path = g.astar(4, 2, 4, 0, null, null, false);

  assert.deepEqual(path, [[4, 1]]);

  filter = function(node) {
    return node.value > 2;
  };

  path = g.astar(0, 2, 4, 0, filter, null, false);

  assert.deepEqual(path, [[1, 2], [2, 2], [2, 1], [2, 0], [3, 0]]);

  m = [[2, 1, 1, 1, 1], [2, 1, 9, 9, 9], [1, 1, 1, 1, 1]];

  g = new graph.Graph(m);

  path = g.astar(4, 2, 4, 0, null, null, false);

  assert.deepEqual(path, [[4, 1]]);

  heuristic = function(n1, n2) {
    return n1.value;
  };

  path = g.astar(4, 2, 4, 0, null, heuristic, false);

  assert.deepEqual(path, [[3, 2], [2, 2], [1, 2], [1, 1], [1, 0], [2, 0], [3, 0]]);

  m = [[1, 1, 0, 1, 1]];

  g = new graph.Graph(m);

  path = g.astar(0, 0, 4, 0);

  assert.deepEqual(path, []);

  m = [
    (function() {
      results = [];
      for (k = 1; k <= 100000; k++){ results.push(k); }
      return results;
    }).apply(this)
  ];

  g = new graph.Graph(m);

  path = g.astar(0, 0, 99999, 0);

  assert.equal(path.length, 99998);

  console.log('all tests ok');

}).call(this);
